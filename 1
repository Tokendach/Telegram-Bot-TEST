import random
import json
import time
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

DATA_FILE = 'scores.json'
REFERRALS_FILE = 'referrals.json'
BASE_COOLDOWN_PERIOD = 7270 # 2 —á–∞—Å–æ–≤
GAME_COOLDOWN_PERIOD = 86400  # 24 —á–∞—Å–∞
ADMIN_ID = 5584706559
BONUS_TDC = 300
CHANNEL_ID = "@dachatoken"

items = ["–ü–æ–º–∏–¥–æ—Ä—ã", "–û–≥—É—Ä—Ü—ã", "–ö–ª—É–±–Ω–∏–∫–∞","–ö–∞–º–Ω–∏","–ë–ª—É–º –ü–æ–∏–Ω—Ç—ã","–•–æ–º—è–∫–∏", "–ö–∞—Ä—Ç–æ—à–∫–∞", "–í–∏—à–Ω—è", "–ß–µ—Ä–µ—à–Ω—è"]
game_messages = ["–ö—Ä—É—á—É...", "–ú—É—á—É...", "–¢—É–¥–∞-—Å—é–¥–∞..."]

def load_scores():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_scores(scores):
    with open(DATA_FILE, 'w') as f:
        json.dump(scores, f)

def load_referrals():
    try:
        with open(REFERRALS_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_referrals(referrals):
    with open(REFERRALS_FILE, 'w') as f:
        json.dump(referrals, f)

scores = load_scores()
referrals = load_referrals()
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"

    keyboard = [
        [InlineKeyboardButton("üî® –°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π", callback_data='mine')],
        [InlineKeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–Ω–∞—á–∫—É", callback_data='score')],
        [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data='leaderboard')],
        [InlineKeyboardButton("üé≤ –î–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data='game')],
        [InlineKeyboardButton("‚ÑπÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data='about')]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f'–≠—Ç–æ —Ç–≤–æ—è –î–∞—á–∞! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n'
        f'üöÄ –ü—Ä–∏–≥–ª–∞—Å–∏ –¢—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç–∞ –Ω–∞ –¥–∞—á—É —Å –Ω–∏–º –±—ã—Å—Ç—Ä–µ–µ –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ 300 TDC!\n–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}',
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'mine':
        await mine(update, context)
    elif query.data == 'game':
        await game(update, context)
    elif query.data == 'score':
        await get_score(update, context)
    elif query.data == 'leaderboard':
        await leaderboard(update, context)
    elif query.data == 'admin':
        await admin_panel(update, context)
    elif query.data == 'about':
        await query.message.reply_text("–ü–∏—à–∏ https://t.me/officialtokendacha")
    elif query.data == 'admin_leaderboard':
        await admin_leaderboard(update, context)
    elif query.data == 'reset_scores':
        await reset_scores(update, context)

async def mine(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.callback_query.from_user.id
    chat_member = await context.bot.get_chat_member(CHANNEL_ID, user_id)

    if chat_member.status not in ['member', 'administrator', 'creator']:
        message = await update.callback_query.message.reply_text(f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: t.me/dachatoken')
        await asyncio.sleep(2)
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message.message_id)
        return

    current_time = time.time()

    if user_id not in user_data:
        user_data[user_id] = {'last_time': 0, 'last_game_time': 0}

    last_mine_time = user_data[user_id]['last_time']

    if current_time - last_mine_time < BASE_COOLDOWN_PERIOD:
        remaining_time = int((BASE_COOLDOWN_PERIOD - (current_time - last_mine_time)) / 3600)
        message = await update.callback_query.message.reply_text(f'‚è≥ –í—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ —É—Ä–æ–∂–∞–π. –ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ —á–µ—Ä–µ–∑ {remaining_time} —á.')
        await asyncio.sleep(2)
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message.message_id)
        return

    user_data[user_id]['last_time'] = current_time

    action_messages = []
    for _ in range(3):
        item = random.choice(items)
        message = await update.callback_query.message.reply_text(f'üå± {item}...')
        action_messages.append(message)
        await asyncio.sleep(1)

    await asyncio.sleep(1)
    for message in action_messages:
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    mined_points = round(random.uniform(0.1, 30), 1)
    scores[user_id] = scores.get(user_id, 0) + mined_points
    save_scores(scores)

    result_message = await update.callback_query.message.reply_text(f' ‚úÖ –í—ã —Å–æ–±—Ä–∞–ª–∏ {mined_points} TDC! –ù–∞ –î–∞—á–µ: {scores[user_id]}')
    await asyncio.sleep(2)
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=result_message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.callback_query.from_user.id
    current_time = time.time()

    if user_id not in user_data:
        user_data[user_id] = {'last_time': 0, 'last_game_time': 0}

    last_game_time = user_data[user_id]['last_game_time']

    if current_time - last_game_time < GAME_COOLDOWN_PERIOD:
        remaining_time = int((GAME_COOLDOWN_PERIOD - (current_time - last_game_time)) / 3600)
        message = await update.callback_query.message.reply_text(f'‚è≥ –¢–∞–∫ –∏ –±–µ–∑ —à—Ç–∞–Ω–æ–≤ –æ—Å—Ç–∞–Ω–µ—à—å—Å—è. –ü—Ä–∏—Ö–æ–¥–∏ —ç—Ç–∞–∫ —á–µ—Ä–µ–∑ {remaining_time} —á.')
        await asyncio.sleep(2)
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message.message_id)
        return

    bet_amount = 1000
    if scores.get(user_id, 0) < bet_amount:
        message = await update.callback_query.message.reply_text('‚ùó –•–∞—Ö–∞—Ö–∞, –¥–∞ —ç—Ç–æ –Ω–µ —Å–º–µ—à–Ω–æ. –ú–∞–ª–æ TDC –¥–ª—è —Å—Ç–∞–≤–æ–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 1000 TDC.')
        await asyncio.sleep(2)
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message.message_id)
        return

    user_data[user_id]['last_game_time'] = current_time
    scores[user_id] -= bet_amount
    save_scores(scores)

    await update.callback_query.message.reply_text("üé≤ –ù—É —â—è—Å –ø–æ–ø—Ä—ë—Ç...")

    for game_message in game_messages:
        msg = await update.callback_query.message.reply_text(game_message)
        await asyncio.sleep(1)
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg.message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    win = random.choice([True, False])
    if win:
        winnings = random.randint(1, 2000)
        scores[user_id] += winnings
        save_scores(scores)
        result_message = await update.callback_query.message.reply_text(f' ‚úÖ –í–æ—Ç —Ç–∞–∫ –¥–∞–∞–∞–∞–∞! {winnings} TDC! –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {scores[user_id]}')
        await asyncio.sleep(2)
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=result_message.message_id)
    else:
        result_message = await update.callback_query.message.reply_text('‚ùå –£–≤—ã, –≤—Å—ë —Å–æ—Å–µ–¥—É.')
        await asyncio.sleep(2)
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=result_message.message_id)

async def get_score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.callback_query.from_user.id
    score = scores.get(user_id, 0)
    message = await update.callback_query.message.reply_text(f'–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç: {score}')
    await asyncio.sleep(2)
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message.message_id)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.callback_query.from_user.id
    keyboard = [
        [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data='admin_leaderboard')],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤", callback_data='reset_scores')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.reply_text("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)

async def admin_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    leaderboard_message = "üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–ê–¥–º–∏–Ω):\n"
    
    for i, (user_id, score) in enumerate(sorted_scores[:10], start=1):
        user = await context.bot.get_chat(user_id)
        username = user.username if user.username else f"User ID: {user_id}"
        leaderboard_message += f"{i}. @{username}: {score} TDC\n"

    await update.callback_query.message.reply_text(leaderboard_message)

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    leaderboard_message = "üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:\n"
    
    for i, (user_id, score) in enumerate(sorted_scores[:10], start=1):
        user = await context.bot.get_chat(user_id)
        username = user.username if user.username else f"User ID: {user_id}"
        leaderboard_message += f"{i}. @{username}: {score} TDC\n"

    await update.callback_query.message.reply_text(leaderboard_message)


async def reset_scores(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    scores.clear()
    save_scores(scores)
    await update.callback_query.message.reply_text("‚úÖ –í—Å–µ —Å—á–µ—Ç–∞ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

app = ApplicationBuilder().token("7613309061:AAHj2mfGvhZr5liu3DJbhCJapgAsy4SzRzw").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))

app.run_polling()

